// src/components/SeedData.tsx
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { db } from '@/services/firebase';
import {
    addDoc,
    collection,
    doc,
    setDoc
} from 'firebase/firestore';
import React, { useState } from 'react';

// Datos de prueba
const testProfessors = [
  {
    name: 'Dr. Rodr√≠guez',
    email: 'rodriguez@universidad.edu',
    subjects: [],
    maxSubjects: 2,
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    name: 'Dra. L√≥pez',
    email: 'lopez@universidad.edu',
    subjects: [],
    maxSubjects: 2,
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    name: 'Prof. Garc√≠a',
    email: 'garcia@universidad.edu',
    subjects: [],
    maxSubjects: 2,
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    name: 'Dr. Mart√≠nez',
    email: 'martinez@universidad.edu',
    subjects: [],
    maxSubjects: 2,
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    name: 'Dra. Herrera',
    email: 'herrera@universidad.edu',
    subjects: [],
    maxSubjects: 2,
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
];

const testSubjects = [
  {
    name: 'C√°lculo I',
    credits: 3,
    professor: '',
    schedule: 'Lun-Mi√©-Vie 8:00-10:00',
    capacity: 30,
    enrolled: 0,
    description: 'Introducci√≥n al c√°lculo diferencial e integral',
    prerequisites: [],
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    name: 'F√≠sica General',
    credits: 3,
    professor: '',
    schedule: 'Mar-Jue 10:00-12:00',
    capacity: 25,
    enrolled: 0,
    description: 'Conceptos fundamentales de mec√°nica y termodin√°mica',
    prerequisites: [],
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    name: 'Qu√≠mica Org√°nica',
    credits: 3,
    professor: '',
    schedule: 'Lun-Mi√© 14:00-17:00',
    capacity: 20,
    enrolled: 0,
    description: 'Estudio de compuestos org√°nicos y sus reacciones',
    prerequisites: [],
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    name: 'Programaci√≥n I',
    credits: 3,
    professor: '',
    schedule: 'Mar-Jue 8:00-10:00',
    capacity: 35,
    enrolled: 0,
    description: 'Fundamentos de programaci√≥n con Python',
    prerequisites: [],
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    name: 'Estad√≠stica',
    credits: 3,
    professor: '',
    schedule: 'Vie 9:00-12:00',
    capacity: 40,
    enrolled: 0,
    description: 'Conceptos b√°sicos de estad√≠stica descriptiva e inferencial',
    prerequisites: [],
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    name: 'Historia del Arte',
    credits: 3,
    professor: '',
    schedule: 'Mi√© 16:00-18:00',
    capacity: 50,
    enrolled: 0,
    description: 'Recorrido por los principales movimientos art√≠sticos',
    prerequisites: [],
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    name: 'Microbiolog√≠a',
    credits: 3,
    professor: '',
    schedule: 'Lun-Mar-Mi√© 10:00-12:00',
    capacity: 15,
    enrolled: 0,
    description: 'Estudio de microorganismos y su impacto',
    prerequisites: [],
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    name: 'Psicolog√≠a Social',
    credits: 3,
    professor: '',
    schedule: 'Jue-Vie 14:00-16:00',
    capacity: 30,
    enrolled: 0,
    description: 'An√°lisis del comportamiento humano en grupos',
    prerequisites: [],
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    name: 'Econom√≠a Internacional',
    credits: 3,
    professor: '',
    schedule: 'Mar-Mi√©-Jue 16:00-17:30',
    capacity: 25,
    enrolled: 0,
    description: 'Principios de comercio y finanzas internacionales',
    prerequisites: [],
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    name: 'Dise√±o Gr√°fico',
    credits: 3,
    professor: '',
    schedule: 'Lun-Vie 18:00-20:00',
    capacity: 20,
    enrolled: 0,
    description: 'Fundamentos del dise√±o visual y comunicaci√≥n',
    prerequisites: [],
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
];

export const SeedData: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [status, setStatus] = useState<string>('');
  const { toast } = useToast();

  const seedProfessors = async () => {
    setLoading(true);
    setStatus('Creando profesores...');
    
    try {
      const professorIds: string[] = [];
      
      for (const professor of testProfessors) {
        const docRef = await addDoc(collection(db, 'professors'), professor);
        professorIds.push(docRef.id);
        console.log('‚úÖ Profesor creado:', professor.name, 'ID:', docRef.id);
      }
      
      setStatus(`‚úÖ ${professorIds.length} profesores creados exitosamente`);
      toast({
        title: "¬°√âxito!",
        description: `${professorIds.length} profesores creados`,
      });
      
      return professorIds;
    } catch (error) {
      console.error('‚ùå Error creando profesores:', error);
      setStatus(`‚ùå Error: ${error instanceof Error ? error.message : 'Error desconocido'}`);
      toast({
        title: "Error",
        description: "Error al crear profesores",
        variant: "destructive",
      });
      return [];
    } finally {
      setLoading(false);
    }
  };

  const seedSubjects = async (professorIds: string[]) => {
    setLoading(true);
    setStatus('Creando materias...');
    
    try {
      const subjectIds: string[] = [];
      
      for (let i = 0; i < testSubjects.length; i++) {
        const subject = { ...testSubjects[i] };
        // Asignar profesor (cada profesor dicta 2 materias)
        const professorIndex = Math.floor(i / 2);
        if (professorIndex < professorIds.length) {
          subject.professor = professorIds[professorIndex];
        }
        
        const docRef = await addDoc(collection(db, 'subjects'), subject);
        subjectIds.push(docRef.id);
        console.log('‚úÖ Materia creada:', subject.name, 'ID:', docRef.id);
      }
      
      setStatus(`‚úÖ ${subjectIds.length} materias creadas exitosamente`);
      toast({
        title: "¬°√âxito!",
        description: `${subjectIds.length} materias creadas`,
      });
      
      return subjectIds;
    } catch (error) {
      console.error('‚ùå Error creando materias:', error);
      setStatus(`‚ùå Error: ${error instanceof Error ? error.message : 'Error desconocido'}`);
      toast({
        title: "Error",
        description: "Error al crear materias",
        variant: "destructive",
      });
      return [];
    } finally {
      setLoading(false);
    }
  };

  const seedAllData = async () => {
    setLoading(true);
    setStatus('Iniciando creaci√≥n de datos...');
    
    try {
      // 1. Crear profesores
      const professorIds = await seedProfessors();
      if (professorIds.length === 0) return;
      
      // 2. Crear materias
      const subjectIds = await seedSubjects(professorIds);
      if (subjectIds.length === 0) return;
      
      // 3. Actualizar profesores con sus materias
      setStatus('Actualizando profesores...');
      for (let i = 0; i < professorIds.length; i++) {
        const professorId = professorIds[i];
        const professorSubjects = subjectIds.slice(i * 2, (i + 1) * 2);
        
        await setDoc(doc(db, 'professors', professorId), {
          subjects: professorSubjects,
          updatedAt: new Date().toISOString()
        }, { merge: true });
      }
      
      setStatus('‚úÖ Todos los datos creados exitosamente');
      toast({
        title: "¬°Completado!",
        description: "Base de datos poblada con datos de prueba",
      });
      
    } catch (error) {
      console.error('‚ùå Error general:', error);
      setStatus(`‚ùå Error: ${error instanceof Error ? error.message : 'Error desconocido'}`);
      toast({
        title: "Error",
        description: "Error al crear datos de prueba",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const clearAllData = async () => {
    if (!confirm('¬øEst√°s seguro de que quieres eliminar todos los datos? Esta acci√≥n no se puede deshacer.')) {
      return;
    }
    
    setLoading(true);
    setStatus('Eliminando datos...');
    
    try {
      // Nota: En producci√≥n, esto deber√≠a usar batch operations
      // Por ahora, solo mostramos un mensaje
      setStatus('‚ö†Ô∏è Funci√≥n de limpieza no implementada por seguridad');
      toast({
        title: "Informaci√≥n",
        description: "Para limpiar datos, usa Firebase Console",
      });
    } catch (error) {
      console.error('‚ùå Error limpiando datos:', error);
      setStatus(`‚ùå Error: ${error instanceof Error ? error.message : 'Error desconocido'}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="text-center">
        <h1 className="text-3xl font-bold mb-2">üå± Poblar Base de Datos</h1>
        <p className="text-muted-foreground">
          Crea datos de prueba para probar el sistema acad√©mico
        </p>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>üìö Datos de Prueba</CardTitle>
            <CardDescription>
              Crea profesores, materias y asigna materias a profesores
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <div className="flex justify-between">
                <span>Profesores:</span>
                <Badge variant="secondary">{testProfessors.length}</Badge>
              </div>
              <div className="flex justify-between">
                <span>Materias:</span>
                <Badge variant="secondary">{testSubjects.length}</Badge>
              </div>
              <div className="flex justify-between">
                <span>Materias por profesor:</span>
                <Badge variant="outline">2</Badge>
              </div>
            </div>
            
            <Button 
              onClick={seedAllData} 
              disabled={loading}
              className="w-full"
            >
              {loading ? 'Creando...' : 'üå± Crear Todos los Datos'}
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>üßπ Limpiar Datos</CardTitle>
            <CardDescription>
              Elimina todos los datos de prueba (usar con precauci√≥n)
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Button 
              onClick={clearAllData} 
              disabled={loading}
              variant="destructive"
              className="w-full"
            >
              üóëÔ∏è Limpiar Todos los Datos
            </Button>
          </CardContent>
        </Card>
      </div>

      {/* Estado */}
      <Card>
        <CardHeader>
          <CardTitle>üìä Estado de la Operaci√≥n</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="p-4 bg-muted rounded-lg">
            <p className="text-sm font-mono">{status || 'Listo para crear datos'}</p>
          </div>
        </CardContent>
      </Card>

      {/* Informaci√≥n */}
      <Card>
        <CardHeader>
          <CardTitle>‚ÑπÔ∏è Informaci√≥n</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3 text-sm text-muted-foreground">
          <p>‚Ä¢ Se crear√°n <strong>5 profesores</strong> con m√°ximo 2 materias cada uno</p>
          <p>‚Ä¢ Se crear√°n <strong>10 materias</strong> de 3 cr√©ditos cada una</p>
          <p>‚Ä¢ Cada materia se asignar√° autom√°ticamente a un profesor</p>
          <p>‚Ä¢ Los datos se guardar√°n en Firestore en tiempo real</p>
          <p>‚Ä¢ Despu√©s de crear los datos, el dashboard mostrar√° estad√≠sticas reales</p>
        </CardContent>
      </Card>
    </div>
  );
};
